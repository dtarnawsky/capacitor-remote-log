{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface CapacitorRemoteLoggerPlugin {\n  /**\n   * Initialize the plugin\n   */\n   initialize(options: Options): Promise<void>;\n\n  /**\n   * Log a message (js object) to the remote logging service\n   */\n  write(message: LogMessage): Promise<void>;\n\n  /**\n   * Listens for status changes.\n   */\n  addListener(\n    eventName: 'logStatusChange',\n    listenerFunc: (status: LogStatus) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes all listeners\n   */\n  removeAllListeners(): Promise<void>;\n}\n\nexport interface LogMessage {\n  /**\n   * Device identifier\n   */\n  id?: string;\n\n  /**\n   * Log Level\n   */\n  level: 'trace' | 'debug' | 'info' | 'warn' | 'error';\n\n  /**\n   * Log Message\n   */\n  message: string;\n\n  /**\n   * Stack Trace\n   */\n  stack?: string;\n}\n\nexport interface LogDevice {\n  /**\n   * Device Identifier\n   */\n  id: string;\n\n  /**\n   * User Agent\n   */\n  userAgent: string;\n\n  /**\n   * Title\n   */\n  title?: string;\n}\n\nexport interface LogStatus {\n  /**\n   * Status Code\n   */\n  code: 'network' | 'error' | 'ok';\n\n  /**\n   * Message\n   */\n  message: string;\n}\n\nexport interface Options {\n  /**\n   * Host name of the remote logging server\n   */\n  hostName: string;\n\n  /**\n   * Port number of the remote logging server\n   */\n  port: number;\n}\n"]}